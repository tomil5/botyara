import requests
from bs4 import BeautifulSoup
import telebot
import threading
import time
import os
import json

# üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = '8172278638:AAF9TSTDai55zMB0Wjn7jwNzXXn3ZIYJrFc'
bot = telebot.TeleBot(TOKEN)

# üìÅ –§–∞–π–ª—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
SEEN_FILE = "seen_ads.json"
USERS_FILE = "users.json"

# üåç –°—Å—ã–ª–∫–∏ –Ω–∞ Avito
URLS = {
    "–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "https://www.avito.ru/kirovskaya_oblast/avtomobili/do-200000-rubley-ASgCAgECAUXGmgwWeyJmcm9tIjowLCJ0byI6MjAwMDAwfQ?f=ASgBAgECAUTutg3qtygBRcaaDBZ7ImZyb20iOjAsInRvIjoyMDAwMDB9"
}

# üîÅ –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
def load_seen_ads():
    if os.path.exists(SEEN_FILE):
        with open(SEEN_FILE, 'r') as f:
            return set(json.load(f))
    return set()

def save_seen_ads():
    with open(SEEN_FILE, 'w') as f:
        json.dump(list(seen_ads), f)

seen_ads = load_seen_ads()

# üë• –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            return set(json.load(f))
    return set()

def save_users():
    with open(USERS_FILE, 'w') as f:
        json.dump(list(allowed_users), f)

allowed_users = load_users()

# üîç –ü–∞—Ä—Å–∏–Ω–≥ Avito
def fetch_ads():
    ads = []
    headers = {
        "User-Agent": "Mozilla/5.0"
    }

    for region, url in URLS.items():
        try:
            response = requests.get(url, headers=headers, timeout=10)
            if response.status_code != 200:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {region}: –∫–æ–¥ {response.status_code}")
                continue

            soup = BeautifulSoup(response.text, 'html.parser')
            items = soup.find_all('div', attrs={"data-marker": "item"})

            for item in items:
                link_tag = item.find('a', href=True)
                if not link_tag:
                    continue

                href = link_tag['href']
                full_link = "https://www.avito.ru" + href

                # –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ —Å—Å—ã–ª–∫–∏
                ad_id = href.split('_')[-1].split('?')[0]  # –ù–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –≤—ã—Ç–∞—â–∏—Ç—å ID

                title = link_tag.get_text(strip=True)
                price_tag = item.find(attrs={"data-marker": "item-price"})
                price = price_tag.get_text(strip=True) if price_tag else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"

                ads.append((region, title, price, full_link, ad_id))

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {region}: {e}")
    return ads

# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
def check_and_send_new_ads():
    ads = fetch_ads()
    new_ads = []

    for region, title, price, link, ad_id in ads:
        if ad_id not in seen_ads:
            seen_ads.add(ad_id)
            new_ads.append((region, title, price, link))

    if new_ads:
        save_seen_ads()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(new_ads)}")

    for region, title, price, link in new_ads:
        msg = f"üöó *{region}*\n*{title}*\nüí∞ {price}\nüîó [–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({link})"
        for user_id in allowed_users:
            try:
                bot.send_message(user_id, msg, parse_mode="Markdown")
            except Exception as e:
                print(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
    print(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω ID: {ad_id}")

# üßæ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.chat.id)
    if user_id not in allowed_users:
        allowed_users.add(user_id)
        save_users()
        bot.send_message(message.chat.id, "‚úÖ –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
    else:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ê–≤–∏—Ç–æ.\n"
                                      "–ö–æ–º–∞–Ω–¥—ã:\n"
                                      "/check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
                                      "/current ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
                                      "/help ‚Äî –ø–æ–º–æ—â—å")

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.reply_to(message, "–ö–æ–º–∞–Ω–¥—ã:\n"
                          "/check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
                          "/current ‚Äî —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
                          "/start ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

@bot.message_handler(commands=['check'])
def manual_check(message):
    bot.reply_to(message, "üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...")
    check_and_send_new_ads()

@bot.message_handler(commands=['current'])
def current_ads(message):
    bot.reply_to(message, "–í–æ—Ç —Ç–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    ads = fetch_ads()
    if not ads:
        bot.send_message(message.chat.id, "–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    for region, title, price, link, ad_id in ads[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 10
        msg = f"üöó *{region}*\n{title}\nüí∞ {price}\nüîó [–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({link})"
        bot.send_message(message.chat.id, msg, parse_mode="Markdown")
        time.sleep(1)  # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –ª–∏–º–∏—Ç—ã Telegram

# üîÅ –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
def periodic_check():
    while True:
        try:
            check_and_send_new_ads()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: {e}")
        time.sleep(300)

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
threading.Thread(target=periodic_check, daemon=True).start()
print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
bot.polling()
